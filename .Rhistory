genres = gsub("\'","\"",movies[i,]$genres)
genres
fromJSON(genres)
all_genres = c()
for (i in 1:nrow(movies)) {
genres_this_movie = gsub("\'","\"",movies[i,]$genres)
genres_this_movie = fromJSON(genres_this_movie)
all_genres = c(all_genres,genres_this_movie$name)
}
all_genres = c()
for (i in 1:nrow(movies)) {
print(i)
genres_this_movie = gsub("\'","\"",movies[i,]$genres)
genres_this_movie = fromJSON(genres_this_movie)
all_genres = c(all_genres,genres_this_movie$name)
}
# so, what genre is represented in this dataset? we can use a simple "table" function...
table(all_genres)
# so, what genre is represented in this dataset? we can use a simple "table" function...
sort(table(all_genres),decreasing=T)
new_data = c()
for (i in 1:nrow(movies)) {
print(i)
genres_this_movie = gsub("\'","\"",movies[i,]$genres) # let's get the list of genres for this film (i)
genres_this_movie = fromJSON(genres_this_movie)
# we are going to create a new data table!
new_data = rbind(new_data,data.frame(genre=genres_this_movie$name,movies[i,]$revenue)) # let's string together all genres referenced
}
genres_this_movie
movies[1,]
movies[i,]
new_data = c()
for (i in 1:nrow(movies)) {
print(i)
genres_this_movie = gsub("\'","\"",movies[i,]$genres) # let's get the list of genres for this film (i)
genres_this_movie = fromJSON(genres_this_movie)
if (nrow(genres_this_movie)>0) { # let's make sure there is a genre defined... avoiding error
# let's assemble a new data table from the genres and the movie revenue
new_data = rbind(new_data,data.frame(genre=genres_this_movie$name,movies[i,]$revenue))
}
}
genres_this_movie
nrow(genres_this_movie)
is.na(genres_this_movie)
length(genres_this_movie)
# does a genre tend to get greater revenue compared to others? let's get a simple average... relooping...
new_data = c()
for (i in 1:nrow(movies)) {
print(i)
genres_this_movie = gsub("\'","\"",movies[i,]$genres) # let's get the list of genres for this film (i)
genres_this_movie = fromJSON(genres_this_movie)
if (length(genres_this_movie)>0) { # let's make sure there is a genre defined... avoiding error
# let's assemble a new data table from the genres and the movie revenue
new_data = rbind(new_data,data.frame(genre=genres_this_movie$name,movies[i,]$revenue))
}
}
new_data[1:10,]
movies$release_date
date(movies$release_date)
datefromstr(movies$release_date)
timefromstr(movies$release_date)
??Date
strftime(movies[1,]$release_date)
strftime(movies[1,]$release_date)>1990
strftime(movies[1,]$release_date)>1999
# let's import the basic movie metadata... this gives us a list of the movies for which we have data!
movies = read.csv('~/Downloads/the-movies-dataset/movies_metadata.csv',stringsAsFactors=F) # read CSV file (comma delimited format)
movies = movies[movies$adult=='False',] # filter out adult movies...
movies = movies[strftime(movies$release_date)>2000] # let's get more recent movies...
dim(movies) # we have a lot of movie data! 40K+... this gives us the "dimension" of our data in rows/columns
# let's import the basic movie metadata... this gives us a list of the movies for which we have data!
movies = read.csv('~/Downloads/the-movies-dataset/movies_metadata.csv',stringsAsFactors=F) # read CSV file (comma delimited format)
movies = movies[movies$adult=='False',] # filter out adult movies...
movies = movies[strftime(movies$release_date)>2010] # let's get more recent movies...
dim(movies) # we have a lot of movie data! 40K+... this gives us the "dimension" of our data in rows/columns
strftime(movies[1,]$release_date)>1999strftime(movies$release_date)
strftime(movies$release_date)
movies$release_date
as.Date(movies$release_date)
as.Date(movies$release_date)>2010
movies = movies[as.Date(movies$release_date)>2010>2010] # let's get more recent movies...
# let's import the basic movie metadata... this gives us a list of the movies for which we have data!
movies = read.csv('~/Downloads/the-movies-dataset/movies_metadata.csv',stringsAsFactors=F) # read CSV file (comma delimited format)
movies = movies[movies$adult=='False',] # filter out adult movies...
movies = movies[as.Date(movies$release_date)>2010] # let's get more recent movies...
dim(movies) # we have a lot of movie data! 40K+... this gives us the "dimension" of our data in rows/columns
# let's import the basic movie metadata... this gives us a list of the movies for which we have data!
movies = read.csv('~/Downloads/the-movies-dataset/movies_metadata.csv',stringsAsFactors=F) # read CSV file (comma delimited format)
movies = movies[movies$adult=='False',] # filter out adult movies...
movies = movies[as.Date(movies$release_date)>2010,] # let's get more recent movies...
dim(movies) # we have a lot of movie data! 40K+... this gives us the "dimension" of our data in rows/columns
# let's import the basic movie metadata... this gives us a list of the movies for which we have data!
movies = read.csv('~/Downloads/the-movies-dataset/movies_metadata.csv',stringsAsFactors=F) # read CSV file (comma delimited format)
movies = movies[movies$adult=='False',] # filter out adult movies...
movies = movies[as.Date(movies$release_date)>2014,] # let's get more recent movies...
dim(movies) # we have a lot of movie data! 40K+... this gives us the "dimension" of our data in rows/columns
# let's import the basic movie metadata... this gives us a list of the movies for which we have data!
movies = read.csv('~/Downloads/the-movies-dataset/movies_metadata.csv',stringsAsFactors=F) # read CSV file (comma delimited format)
movies = movies[movies$adult=='False',] # filter out adult movies...
movies = movies[as.Date(movies$release_date)>2015,] # let's get more recent movies...
dim(movies) # we have a lot of movie data! 40K+... this gives us the "dimension" of our data in rows/columns
# let's import the basic movie metadata... this gives us a list of the movies for which we have data!
movies = read.csv('~/Downloads/the-movies-dataset/movies_metadata.csv',stringsAsFactors=F) # read CSV file (comma delimited format)
movies = movies[movies$adult=='False',] # filter out adult movies...
movies = movies[as.Date(movies$release_date)>2017,] # let's get more recent movies...
dim(movies) # we have a lot of movie data! 40K+... this gives us the "dimension" of our data in rows/columns
# let's import the basic movie metadata... this gives us a list of the movies for which we have data!
movies = read.csv('~/Downloads/the-movies-dataset/movies_metadata.csv',stringsAsFactors=F) # read CSV file (comma delimited format)
movies = movies[movies$adult=='False',] # filter out adult movies...
movies = movies[as.Date(movies$release_date)>"2015-01-01",] # let's get more recent movies...
dim(movies) # we have a lot of movie data! 40K+... this gives us the "dimension" of our data in rows/columns
# let's import the basic movie metadata... this gives us a list of the movies for which we have data!
movies = read.csv('~/Downloads/the-movies-dataset/movies_metadata.csv',stringsAsFactors=F) # read CSV file (comma delimited format)
movies = movies[movies$adult=='False',] # filter out adult movies...
movies = movies[as.Date(movies$release_date)>"2010-01-01",] # let's get more recent movies...
dim(movies) # we have a lot of movie data! 40K+... this gives us the "dimension" of our data in rows/columns
# let's get the list of genres... to do this, we loop and extract the genre info...
all_genres = c()
for (i in 1:nrow(movies)) { # this is called a for loop
print(i)
genres_this_movie = gsub("\'","\"",movies[i,]$genres) # let's get the list of genres for this film (i)
genres_this_movie = fromJSON(genres_this_movie)
all_genres = c(all_genres,genres_this_movie$name) # let's string together all genres referenced
}
# let's import the basic movie metadata... this gives us a list of the movies for which we have data!
movies = read.csv('~/Downloads/the-movies-dataset/movies_metadata.csv',stringsAsFactors=F) # read CSV file (comma delimited format)
movies = movies[movies$adult=='False',] # filter out adult movies...
movies = movies[as.Date(movies$release_date)>"2010-01-01",] # let's get more recent movies...
dim(movies) # we have a lot of movie data! 40K+... this gives us the "dimension" of our data in rows/columns
# let's get the list of genres... to do this, we loop and extract the genre info...
all_genres = c()
for (i in 1:nrow(movies)) { # this is called a for loop
print(i)
genres_this_movie = gsub("\'","\"",movies[i,]$genres) # let's get the list of genres for this film (i)
genres_this_movie = fromJSON(genres_this_movie)
all_genres = c(all_genres,genres_this_movie$name) # let's string together all genres referenced
}
movies[1,]
substr(movies[1,]$release_date,1,4)
# let's import the basic movie metadata... this gives us a list of the movies for which we have data!
movies = read.csv('~/Downloads/the-movies-dataset/movies_metadata.csv',stringsAsFactors=F) # read CSV file (comma delimited format)
substr(movies[1,]$release_date,1,4)
# let's import the basic movie metadata... this gives us a list of the movies for which we have data!
movies = read.csv('~/Downloads/the-movies-dataset/movies_metadata.csv',stringsAsFactors=F) # read CSV file (comma delimited format)
movies = movies[movies$adult=='False',] # filter out adult movies...
movies = movies[as.numeric(substr(movies[1,]$release_date,1,4))>2010,] # let's get more recent movies...
dim(movies) # we have a lot of movie data! 40K+... this gives us the "dimension" of our data in rows/columns
# let's import the basic movie metadata... this gives us a list of the movies for which we have data!
movies = read.csv('~/Downloads/the-movies-dataset/movies_metadata.csv',stringsAsFactors=F) # read CSV file (comma delimited format)
movies = movies[movies$adult=='False',] # filter out adult movies...
movies = movies[as.numeric(substr(movies$release_date,1,4))>2010,] # let's get more recent movies...
dim(movies) # we have a lot of movie data! 40K+... this gives us the "dimension" of our data in rows/columns
# let's get the list of genres... to do this, we loop and extract the genre info...
all_genres = c()
for (i in 1:nrow(movies)) { # this is called a for loop
print(i)
genres_this_movie = gsub("\'","\"",movies[i,]$genres) # let's get the list of genres for this film (i)
genres_this_movie = fromJSON(genres_this_movie)
all_genres = c(all_genres,genres_this_movie$name) # let's string together all genres referenced
}
movies[1,]
# let's import the basic movie metadata... this gives us a list of the movies for which we have data!
movies = read.csv('~/Downloads/the-movies-dataset/movies_metadata.csv',stringsAsFactors=F) # read CSV file (comma delimited format)
movies = movies[movies$adult=='False',] # filter out adult movies...
as.numeric(substr(movies$release_date,1,4))>2010
length(as.numeric(substr(movies$release_date,1,4))>2010)
movies(is.na(movies$release_date))
movies[is.na(movies$release_date),]
# let's import the basic movie metadata... this gives us a list of the movies for which we have data!
movies = read.csv('~/Downloads/the-movies-dataset/movies_metadata.csv',stringsAsFactors=F) # read CSV file (comma delimited format)
movies[is.na(movies$release_date),]
movies[735,]
movies = movies[as.numeric(substr(movies$release_date,1,4))>2010 && movies$release_date!="",] # let's get more recent movies...
dim(movies) # we have a lot of movie data! 40K+... this gives us the "dimension" of our data in rows/columns
# let's import the basic movie metadata... this gives us a list of the movies for which we have data!
movies = read.csv('~/Downloads/the-movies-dataset/movies_metadata.csv',stringsAsFactors=F) # read CSV file (comma delimited format)
movies = movies[movies$adult=='False',] # filter out adult movies...
movies = movies[as.numeric(substr(movies$release_date,1,4))>2010 && movies$release_date!="",] # let's get more recent movies...
dim(movies) # we have a lot of movie data! 40K+... this gives us the "dimension" of our data in rows/columns
# let's import the basic movie metadata... this gives us a list of the movies for which we have data!
movies = read.csv('~/Downloads/the-movies-dataset/movies_metadata.csv',stringsAsFactors=F) # read CSV file (comma delimited format)
movies = movies[movies$adult=='False',] # filter out adult movies...
movies = movies[movies$release_date!="",] # only get movies that have release dates!
movies = movies[as.numeric(substr(movies$release_date,1,4))>2010,] # let's get more recent movies...
dim(movies) # we have a lot of movie data! 40K+... this gives us the "dimension" of our data in rows/columns
# let's get the list of genres... to do this, we loop and extract the genre info...
all_genres = c()
for (i in 1:nrow(movies)) { # this is called a for loop
print(i)
genres_this_movie = gsub("\'","\"",movies[i,]$genres) # let's get the list of genres for this film (i)
genres_this_movie = fromJSON(genres_this_movie)
all_genres = c(all_genres,genres_this_movie$name) # let's string together all genres referenced
}
# so, what genre is represented in this dataset? we can use a simple "table" function...
sort(table(all_genres),decreasing=T)
# does a genre tend to get greater revenue compared to others? let's get a simple average... relooping...
new_data = c()
for (i in 1:nrow(movies)) {
print(i)
genres_this_movie = gsub("\'","\"",movies[i,]$genres) # let's get the list of genres for this film (i)
genres_this_movie = fromJSON(genres_this_movie)
if (length(genres_this_movie)>0) { # let's make sure there is a genre defined... avoiding error
# let's assemble a new data table from the genres and the movie revenue
new_data = rbind(new_data,data.frame(genre=genres_this_movie$name,movies[i,]$revenue))
}
}
new_data[1,]
new_data[1:100,]
movies[i,]$title
# does a genre tend to get greater revenue compared to others? let's get a simple average... relooping...
new_data = c()
for (i in 1:nrow(movies)) {
print(i)
genres_this_movie = gsub("\'","\"",movies[i,]$genres) # let's get the list of genres for this film (i)
genres_this_movie = fromJSON(genres_this_movie)
if (length(genres_this_movie)>0) { # let's make sure there is a genre defined... avoiding error
# let's assemble a new data table from the genres and the movie revenue
new_data = rbind(new_data,data.frame(title=movies[i,]$title,genre=genres_this_movie$name,movies[i,]$revenue))
}
}
new_data[1,]
new_data[4,]
new_data["100",]
new_data[100,]
new_data[1000,]
new_data[2000,]
new_data[3000,]
new_data[4000,]
new_data[5000,]
new_data[6000,]
new_data[7000,]
# highest revenue in our dataset? let's sort then select
movies[sort(movies$revenue,decreasing=TRUE,index=TRUE)$ix[1:20],]
select
subset
help(subset)
# highest revenue in our dataset? let's sort then select
subset(movies[sort(movies$revenue,decreasing=TRUE,index=TRUE)$ix[1:20],],c(title))
# highest revenue in our dataset? let's sort then select
subset(movies[sort(movies$revenue,decreasing=TRUE,index=TRUE)$ix[1:20],],'title')
# highest revenue in our dataset? let's sort then select
subset(movies[sort(movies$revenue,decreasing=TRUE,index=TRUE)$ix[1:20],],title)
# highest revenue in our dataset? let's sort then select
subset(movies[sort(movies$revenue,decreasing=TRUE,index=TRUE)$ix[1:20],],c(title))
# highest revenue in our dataset? let's sort then select
movies[sort(movies$revenue,decreasing=TRUE,index=TRUE)$ix[1:20],]
# highest revenue in our dataset? let's sort then select
movies[sort(movies$revenue,decreasing=TRUE,index=TRUE)$ix[1:20],1]
# highest revenue in our dataset? let's sort then select
movies[sort(movies$revenue,decreasing=TRUE,index=TRUE)$ix[1:20],2]
# highest revenue in our dataset? let's sort then select
movies[sort(movies$revenue,decreasing=TRUE,index=TRUE)$ix[1:20],3]
# highest revenue in our dataset? let's sort then select
movies[sort(movies$revenue,decreasing=TRUE,index=TRUE)$ix[1:20],4]
movies[1,]
subset(movies,original_title)
subset(movies,c(original_title))
select
subselect
subset(movies)
with(movies,subset(original_title))
subset(movies,select=original_title)
subset(movies[top_20,],select=c(original_title,revenue))
# highest revenue in our dataset? let's sort then select
top_20 = sort(movies$revenue,decreasing=TRUE,index=TRUE)$ix[1:20] # this is the row index in our main data
subset(movies[top_20,],select=c(original_title,revenue))
# does a genre tend to get greater revenue compared to others? let's get a simple average... relooping...
new_data = c()
for (i in 1:nrow(movies)) {
print(i)
genres_this_movie = gsub("\'","\"",movies[i,]$genres) # let's get the list of genres for this film (i)
genres_this_movie = fromJSON(genres_this_movie)
if (length(genres_this_movie)>0) { # let's make sure there is a genre defined... avoiding error
# let's assemble a new data table from the genres and the movie revenue
new_data = rbind(new_data,data.frame(title=movies[i,]$original_title,genre=genres_this_movie$name,movies[i,]$revenue))
}
}
# a better way to do this would be something like regression, but for our purposes... we can just
# look at averages of revenue for movies marked with particular genres...
boxplot(revenue~genre,data=new_data)
# does a genre tend to get greater revenue compared to others? let's get a simple average... relooping...
new_data = c()
for (i in 1:nrow(movies)) {
print(i)
genres_this_movie = gsub("\'","\"",movies[i,]$genres) # let's get the list of genres for this film (i)
genres_this_movie = fromJSON(genres_this_movie)
if (length(genres_this_movie)>0) { # let's make sure there is a genre defined... avoiding error
# let's assemble a new data table from the genres and the movie revenue
new_data = rbind(new_data,data.frame(title=movies[i,]$original_title,
genre=genres_this_movie$name,
revenue=movies[i,]$revenue))
}
}
colnames(movies)
# a better way to do this would be something like regression, but for our purposes... we can just
# look at averages of revenue for movies marked with particular genres...
boxplot(revenue~genre,data=new_data)
# a better way to do this would be something like regression, but for our purposes... we can just
# look at averages of revenue for movies marked with particular genres...
boxplot(revenue~genre,data=new_data[new_data$revenue>0,]) # note we remove 0's!
# a better way to do this would be something like regression, but for our purposes... we can just
# look at averages of revenue for movies marked with particular genres...
boxplot(log(revenue+1)~genre,data=new_data[new_data$revenue>0,]) # note we remove 0's!
# a better way to do this would be something like regression, but for our purposes... we can just
# look at averages of revenue for movies marked with particular genres...
boxplot(log(revenue+1)~genre,data=new_data) # note we remove 0's!
# a better way to do this would be something like regression, but for our purposes... we can just
# look at averages of revenue for movies marked with particular genres...
boxplot(log(revenue)~genre,data=new_data[new_data$revenue>0,]) # note we remove 0's!
# a better way to do this would be something like regression, but for our purposes... we can just
# look at averages of revenue for movies marked with particular genres...
summary_data = aggregate(revenue~genre,data=new_data)
# a better way to do this would be something like regression, but for our purposes... we can just
# look at averages of revenue for movies marked with particular genres...
summary_data = aggregate(revenue~genre,data=new_data,FUN=mean)
plot(summary_data)
barplot(summary_data)
barplot(summary_data$genre,height=summary_data$revenue)
# a better way to do this would be something like regression, but for our purposes... we can just
# look at averages of revenue for movies marked with particular genres...
summary_data = aggregate(revenue~genre,data=new_data,FUN=mean)
barplot(summary_data$genre,height=summary_data$revenue)
summary_data$revenue
summary_data$genre
barplot(summary_data$genre,height=summary_data$revenue)
barplot(labels=summary_data$genre,height=summary_data$revenue)
barplot(xlab=summary_data$genre,height=summary_data$revenue)
help(barplot)
barplot(names=summary_data$genre,height=summary_data$revenue)
barplot(legend.text=summary_data$genre,height=summary_data$revenue)
help(barplot)
barplot(legend.text=summary_data$genre,height=summary_data$revenue,col=rainbow)
barplot(legend.text=summary_data$genre,height=summary_data$revenue,col=rainbow())
??palette
barplot(legend.text=summary_data$genre,height=summary_data$revenue,col=LAB())
barplot(legend.text=summary_data$genre,height=summary_data$revenue,col=LAB)
barplot(legend.text=summary_data$genre,height=summary_data$revenue,col=rainbow_hcl)
barplot(legend.text=summary_data$genre,height=summary_data$revenue,col=rainbow_hcl())
rainbow
barplot(legend.text=summary_data$genre,height=summary_data$revenue,col=rainbow)
barplot(legend.text=summary_data$genre,height=summary_data$revenue,col=rainbow())
barplot(legend.text=summary_data$genre,height=summary_data$revenue,col=rainbow(n=length(summary_data)))
barplot(legend.text=summary_data$genre,height=summary_data$revenue,col=rainbow(n=nrow(summary_data)))
help(rainbow)
barplot(legend.text=summary_data$genre,height=summary_data$revenue,
col=cm.colors(n=nrow(summary_data)))
barplot(legend.text=summary_data$genre,height=summary_data$revenue,
col=topo.colors(n=nrow(summary_data)))
barplot(legend.text=summary_data$genre,height=summary_data$revenue,
col=topo.colors(n=nrow(summary_data)),ylab='$',xlab='Genre')
barplot(legend.text=summary_data$genre,height=summary_data$revenue,
col=colors(n=nrow(summary_data)),ylab='$',xlab='Genre')
barplot(legend.text=summary_data$genre,height=summary_data$revenue,
col=colors(distinct=nrow(summary_data)),ylab='$',xlab='Genre')
barplot(legend.text=summary_data$genre,height=summary_data$revenue,
col=colors(distinct=nrow(summary_data)),ylab='$',xlab='Genre')
barplot(legend.text=summary_data$genre,height=summary_data$revenue,
col=hsv(h=nrow(summary_data)),ylab='$',xlab='Genre')
barplot(legend.text=summary_data$genre,height=summary_data$revenue,
col=rainbow(n=nrow(summary_data)),ylab='$',xlab='Genre')
install.packages('jsonlite') # let's install some packages we need
install.packages('tidytext')
install.packages('tidyverse')
install.packages('glue')
install.packages('stringr')
library(jsonlite) # let's load these packages into our R (you have to do this anytime you restart R)
library(tidytext)
library(tidyverse)
library(glue)
library(stringr)
install.packages("jsonlite")
install.packages("jsonlite")
library(tidytext)
sentiments
get_sentiments("nrc")
get_sentiments("nrc")
get_sentiments("nrc")$word
get_sentiments("nrc")$word
get_sentiments("nrc")
get_sentiments("nrc")
get_sentiments("nrc")["sadness"]
lower
tolower
movies[1:100,]$overview
tokenize(movies[1,]$overview)
help(tokenize)
unnset_tokens(movies[1,]$overview)
unnest_tokens(movies[1,]$overview)
help("unnest_tokens")
movies[1,]$overivew %>% unnest_tokens(word,txt)
movies[1,]$overview %>% unnest_tokens(word,txt)
data_frame(movies[1,]$overview) %>% unnest_tokens(word,txt)
overview_words = gsub("\.","",tolower(strsplit(movies[i,]$overview," ")))
overview_words = gsub("\\.","",tolower(strsplit(movies[i,]$overview," ")))
overview_words
overview_words = tolower(strsplit(gsub("\\.","",movies[i,]$overview," ")))
overview_words = tolower(strsplit(gsub("\\.","",movies[i,]$overview)," "))
overview_words
overview_words = tolower(strsplit(gsub("\.","",movies[i,]$overview)," "))
overview_words = tolower(strsplit(gsub(".","",movies[i,]$overview)," "))
overview_words
gsub(".","",movies[i,]$overview)
movies[i,]$overview
gsub(",","",movies[i,]$overview)
gsub(",","",movies[i,]$overview)
gsub('.',"",movies[i,]$overview)
gsub('\.',"",movies[i,]$overview)
gsub('\\.',"",movies[i,]$overview)
get_word_tokens = function(txt) {
txt = tolower(txt)
txt = gsub(',','',txt)
txt = gsub('\\.','',txt)
return(unlist(strsplit(txt,' ')))
}
# let's do some quick cleaning... this is a function I created... it's very simple and rough
# but gives us a list of words in the overview
overview_words = get_word_tokens(movies[i,]$overview)
overview_words
i
get_sentiments("nrc")
joy_words = get_sentiments("nrc")[get_sentiments("nrc")$sentiment=="joy",]
joy_words
# let's loop through our movies... this time taking the column "overview" and performing a sentiment
# analysis on it...
new_data_sentiment = c()
joy_words = get_sentiments("nrc")[get_sentiments("nrc")$sentiment=="joy",]$word
anger_words = get_sentiments("nrc")[get_sentiments("nrc")$sentiment=="anger",]$word
overview_words %in% joy_words
anger_count = sum(overview_words %in% anger_words)
anger_count
joy_words = get_sentiments("nrc")[get_sentiments("nrc")$sentiment=="joy",]$word
anger_words = get_sentiments("nrc")[get_sentiments("nrc")$sentiment=="anger",]$word
movies$sentiment = -999999 # let's create a new column and initialize it to -99999
for (i in 1:nrow(movies)) {
print(i)
# let's do some quick cleaning... this is a function I created... it's very simple and rough
# but gives us a list of words in the overview
overview_words = get_word_tokens(movies[i,]$overview)
joy_count = sum(overview_words %in% joy_words)
anger_count = sum(overview_words %in% anger_words)
sentiment = (joy_count-anger_count)/length(overview_words) # simple equation -- proportion joyful
movies[i,]$sentiment = sentiment # we're gonna update the sentiment column here!
}
# top 20 positivity...
top_20 = sort(movies$sentiment,decreasing=TRUE,index=TRUE)$ix[1:20] # this is the row index in our main data
subset(movies[top_20,],select=c(original_title,revenue))
# top 20 positivity...
top_20 = sort(movies$sentiment,decreasing=TRUE,index=TRUE)$ix[1:20] # this is the row index in our main data
subset(movies[top_20,],select=c(original_title,sentiment))
# top 20 positivity...
top_20 = sort(movies$sentiment,decreasing=TRUE,index=TRUE)$ix[1:20] # this is the row index in our main data
top_20
e
subset(movies[top_20,],select=c(original_title,sentiment))
movies$sentiment
# let's loop through our movies... this time taking the column "overview" and performing a sentiment
# analysis on it...
joy_words = get_sentiments("nrc")[get_sentiments("nrc")$sentiment=="joy",]$word
anger_words = get_sentiments("nrc")[get_sentiments("nrc")$sentiment=="anger",]$word
movies$sentiment = -999999 # let's create a new column and initialize it to -99999
for (i in 1:nrow(movies)) {
print(i)
# let's do some quick cleaning... this is a function I created... it's very simple and rough
# but gives us a list of words in the overview
overview_words = get_word_tokens(movies[i,]$overview)
joy_count = sum(overview_words %in% joy_words)
anger_count = sum(overview_words %in% anger_words)
sentiment = (joy_count-anger_count)/length(overview_words) # simple equation -- proportion joyful
if (is.na(sentiment)) {
sentiment = 0 # if sentiment is undefined... then let's set it to 0 ("neutral" or "unknown")
}
movies[i,]$sentiment = sentiment # we're gonna update the sentiment column here!
}
# top 20 positivity...
top_20 = sort(movies$sentiment,decreasing=TRUE,index=TRUE)$ix[1:20] # this is the row index in our main data
subset(movies[top_20,],select=c(original_title,sentiment))
# and "anger"
top_20 = sort(movies$sentiment,decreasing=FALSE,index=TRUE)$ix[1:20] # this is the row index in our main data
subset(movies[top_20,],select=c(original_title,sentiment))
# and... how does revenue relate to sentiment... if at all?
# let's build a scatterplot!
plot(movies$sentiment,movies$revenue)
# and... how does revenue relate to sentiment... if at all?
# let's build a scatterplot!
plot(movies$sentiment,log(movies$revenue+1))
plot(movies$sentiment,movies$popularity)
cor(movies$sentiment,movies$popularity)
movies$popularity
cor(movies$sentiment,as.numeric(movies$popularity))
cor.test(movies$sentiment,as.numeric(movies$popularity))
cor.test(movies$sentiment,as.numeric(movies$revenue))
# whoa... let's talk...
movies_sub = movies[movies$revenue>0 && movies$sentiment!= 0,]
plot(movies$sentiment,movies$revenue)
# whoa... let's talk...
movies_sub = movies[movies$revenue>0 && movies$sentiment!= 0,]
plot(movies_sub$sentiment,movies_sub$revenue)
# whoa... let's talk...
movies_sub = movies[as.numeric(movies$revenue)>0 && movies$sentiment!= 0,]
plot(movies_sub$sentiment,movies_sub$revenue)
# whoa... let's talk...
movies_sub = movies[as.numeric(movies$revenue)>0 & movies$sentiment!= 0,]
plot(movies_sub$sentiment,movies_sub$revenue)
cor.test(movies_sub$sentiment,movies_sub$revenue)
plot(movies_sub$sentiment,movies_sub$revenue)
cor.test(movies_sub$sentiment,movies_sub$revenue)
movies[1,]
# let's import the basic movie metadata... this gives us a list of the movies for which we have data!
movies = read.csv('https://co-mind.org/comm-130/movies_metadata.csv',stringsAsFactors=F) # read CSV file (comma delimited format)
movies[1,]
mice
mice()
